""" Copyright start
  Copyright (C) 2008 - 2023 Fortinet Inc.
  All rights reserved.
  FORTINET CONFIDENTIAL & FORTINET PROPRIETARY SOURCE CODE
  Copyright end """

from connectors.core.connector import get_logger, ConnectorError
from requests import exceptions as req_exceptions
from .microsoft_api_auth import *

logger = get_logger('microsoft-defender-vulnerability-management')
URL = "/api/vulnerabilities/"


def api_request(method, endpoint, connector_info, config, params=None, data=None, headers={}):
    try:
        ms = MicrosoftAuth(config)
        endpoint = ms.host + endpoint
        token = ms.validate_token(config, connector_info)
        headers['Authorization'] = token
        headers['Content-Type'] = 'application/json'
        headers['consistencylevel'] = 'eventual'
        try:
            response = request(method, endpoint, headers=headers, params=params, data=data,
                               verify=ms.verify_ssl)
            if response.status_code in [200, 201, 204]:
                if response.text != "":
                    return response.json()
                else:
                    return True
            else:
                if response.text != "":
                    err_resp = response.json()
                    failure_msg = err_resp['error']['message']
                    error_msg = 'Response [{0}:{1} Details: {2}]'.format(response.status_code, response.reason,
                                                                         failure_msg if failure_msg else '')
                else:
                    error_msg = 'Response [{0}:{1}]'.format(response.status_code, response.reason)
                logger.error(error_msg)
                raise ConnectorError(error_msg)
        except req_exceptions.SSLError:
            logger.error('An SSL error occurred')
            raise ConnectorError('An SSL error occurred')
        except req_exceptions.ConnectionError:
            logger.error('A connection error occurred')
            raise ConnectorError('A connection error occurred')
        except req_exceptions.Timeout:
            logger.error('The request timed out')
            raise ConnectorError('The request timed out')
        except req_exceptions.RequestException:
            logger.error('There was an error while handling the request')
            raise ConnectorError('There was an error while handling the request')
        except Exception as err:
            raise ConnectorError(str(err))
    except Exception as err:
        raise ConnectorError(str(err))


def build_query(params):
    filter_str = []
    filter_para = ['id', 'publishedOn', 'severity', 'machineId', 'cveId']
    for x in filter_para:
        if params.get(x) is not None and params.get(x) != '':
            if x == 'publishedOn':
                filter_str.append(x + ' ge ' + params.get(x))
            else:
                filter_str.append(x + ' eq ' + f"'{params.get(x)}'")
    if params.get("$filter"):
        filter_str.append(params.get("$filter"))
    return ' and '.join(filter_str)


def list_vulnerabilities(config, params, connector_info):
    payload = {
        '$filter': build_query(params),
        '$skip': params.get('$skip'),
        '$top': params.get('$top')
    }
    payload = {k: v for k, v in payload.items() if v is not None and v != ''}
    logger.debug("Checking the Payload:{0}".format(payload))
    response = api_request("GET", URL, connector_info, config, params=payload)
    return response


def list_vulnerabilities_by_machine_and_software(config, params, connector_info):
    payload = {
        '$filter': build_query(params),
        '$skip': params.get('$skip'),
        '$top': params.get('$top')
    }
    payload = {k: v for k, v in payload.items() if v is not None and v != ''}
    logger.debug("Checking the Payload:{0}".format(payload))
    response = api_request("GET", URL + "machinesVulnerabilities", connector_info, config, params=payload)
    return response


def get_specific_cve_details(config, params, connector_info):
    payload = {
        '$filter': build_query(params)
    }
    logger.debug("Checking the Payload:{0}".format(payload))
    response = api_request("GET", URL + "machinesVulnerabilities", connector_info, config, params=payload)
    return response


def get_vulnerability_by_id(config, params, connector_info):
    url = "{0}{1}".format(URL, params.get('id'))
    response = api_request("GET", url, connector_info, config)
    return response


def list_devices_by_vulnerability(config, params, connector_info):
    url = "{0}{1}".format(URL, params.get('id')) + "/machineReferences"
    response = api_request("GET", url, connector_info, config)
    return response


def _check_health(config, connector_info):
    params = {
        '$top': 1
    }
    if check(config, connector_info) and list_vulnerabilities(config, params, connector_info=connector_info):
        return True


operations = {
    'list_vulnerabilities': list_vulnerabilities,
    'list_vulnerabilities_by_machine_and_software': list_vulnerabilities_by_machine_and_software,
    'get_vulnerability_by_id': get_vulnerability_by_id,
    'list_devices_by_vulnerability': list_devices_by_vulnerability,
    'get_specific_cve_details': get_specific_cve_details
}
